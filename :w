import numpy as np
import pytest
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from geometry.geometry_entities import Vertex, Edge, Facet, Body
from runtime.refinement import refine_polygonal_facets, refine_triangle_mesh
from parameters.global_parameters import GlobalParameters

def create_quad():
    # A unit square in the XY plane
    v0 = Vertex([0, 0, 0], 0)
    v1 = Vertex([1, 0, 0], 1)
    v2 = Vertex([1, 1, 0], 2)
    v3 = Vertex([0, 1, 0], 3)
    vertices = [v0, v1, v2, v3]

    e0 = Edge(v0, v1, 0)
    e1 = Edge(v1, v2, 1)
    e2 = Edge(v2, v3, 2)
    e3 = Edge(v3, v0, 3)
    edges = [e0, e1, e2, e3]

    facet = Facet([e0, e1, e2, e3], 0)
    facets = [facet]

    body = Body(facets, index=0, options={"target_volume": 0})
    return vertices, edges, facets, [body]

def test_triangle_refinement_updates_bodies():
    vertices, edges, facets, bodies = create_quad()
    global_params = GlobalParameters({})

    # Testing polygonal refinement 
    v_tri, e_tri, f_tri, b_tri = refine_polygonal_facets(vertices, edges, facets, bodies)
    assert len(v_tri) == len(vertices) + len(facets), "Initial triangulation of square should add a vertex at centroid, 5 total."
    assert len(e_tri) == len(edges) * 2, "Initial triangulation of square should end with 8 edges."
    assert all(len(f.edges) == 3 for f in f_tri), "All refined facets must be triangles"
    assert len(f_tri) == len(vertices), "Initial triangulation of square should end with 4 facets."
    assert all(isinstance(f, Facet) for f in b_tri[0].facets), "All body facets must be Facets"
    assert len(b_tri[0].facets) == len(f_tri), "Body should include all refined facets"

    # Testing triangular refinement
    v_ref, e_ref, f_ref, b_ref = refine_triangle_mesh(v_tri, e_tri, f_tri, b_tri)

    print("########")
    #print(f"len(e_ref): {len(e_ref)}")
    #for i in e_ref: print(i)
    print("########")
    assert len(v_ref) == len(v_tri) + len(e_tri), "Refinemenet should add len(edges) new vertex per facet"
    assert len(e_ref) == 2 * len(e_tri) + 3 * len(f_tri), "Refining splits edges and adds 3 more for each facet"
    assert len(f_ref) == 2**len(f_tri), "Refiningt increases number of facets by factor of 2^k"
    assert all(len(f.edges) == 3 for f in f_ref), "All refined facets must be triangles"
    assert all(isinstance(f, Facet) for f in b_ref[0].facets), "All body facets must be Facets"
    assert len(b_ref[0].facets) == len(f_ref), "Body should include all refined facets"

def test_child_facets_are_closed_loops():
    vertices, edges, facets, bodies = create_quad()

    # 1. check loop on initial triangulation 
    v2, e2, f2, b2 = refine_polygonal_facets(vertices, edges, facets, bodies)

    for facet in f2:
        # grab the three edges in order
        # check chaining: edge.head == next_edge.tail (mod 3)
        for i in range(3):
            e_curr = facet.edges[i]
            e_next = facet.edges[(i+1) % 3]
            assert e_curr.head == e_next.tail, (
                f"Facet {facet.index} is not a closed loop: "
                f"edge {e_curr.index}.head={e_curr.head!r} ≠ "
                f"edge {e_next.index}.tail={e_next.tail!r}"
            )

    # 2. check loop in runtime triangulation
    v3, e3, f3, b3 = refine_polygonal_facets(v2, e2, f2, b2)

    for facet in f3:
        # grab the three edges in order
        # check chaining: edge.head == next_edge.tail (mod 3)
        for i in range(3):
            e_curr = facet.edges[i]
            e_next = facet.edges[(i+1) % 3]
            assert e_curr.head == e_next.tail, (
                f"Facet {facet.index} is not a closed loop: "
                f"edge {e_curr.index}.head={e_curr.head!r} ≠ "
                f"edge {e_next.index}.tail={e_next.tail!r}"
            )
